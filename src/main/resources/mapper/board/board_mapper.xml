<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.toast.board.dao.BoardDAO">

	<!-- 게시글 작성할 때, 필요한 개인 정보들을 가져온다. (사원번호, 부서번호) -->
	<!-- 발령정보에서 가져와야 하는데, 인사 이동이 있을 시 여러개의 값이 있을 수 있다. 가장 최신걸 가져오는 쿼리 필요. -->
	<select id="memberInfo" parameterType="String" resultType="map">
		SELECT a.appo_empl_idx, e.file_key
		FROM employee e
		JOIN appointment a ON e.empl_idx = a.appo_empl_idx
		WHERE e.empl_id = #{id}
		ORDER BY appo_idx
		DESC
		LIMIT 1
	</select>
	
	<select id="getDeptName" parameterType="String">
		SELECT d.dept_name
		FROM employee e
		JOIN appointment a ON e.empl_idx = a.appo_empl_idx
		JOIN department d ON a.dept_idx = d.dept_idx
		WHERE empl_id = #{id}
		ORDER BY appo_idx
		DESC
		LIMIT 1
	</select>
	
	<select id="boardInfo" parameterType="int">
		SELECT file_key
		FROM board
		WHERE board_idx = #{board_idx}
	</select>
	
	<select id="getFileList" parameterType="map" resultType="com.toast.member.dto.FileDTO">
		SELECT f.file_idx, f.file_key, f.uploader_idx, f.ori_filename, f.new_filename, f.file_type, f.file_addr
		FROM file f
		JOIN employee e ON f.uploader_idx = e.empl_idx
		WHERE f.file_key = #{file_key}
	</select>
	
	<insert id="fileUpload" parameterType="com.toast.member.dto.FileDTO">
		INSERT INTO file(file_key, uploader_idx, ori_filename, new_filename, file_type, file_addr)
		VALUES(#{file_key}, #{uploader_idx}, #{ori_filename}, #{new_filename}, #{file_type}, #{file_addr})
	</insert>
	
	<delete id="deleteFile">
		DELETE FROM file
		WHERE file_idx = #{file_idx}
	</delete>
	
	<select id="originalFileName" parameterType="String">
		SELECT ori_filename
		FROM file
		WHERE new_filename = #{filename}
	</select>

	<insert id="boardWrite" parameterType="map" useGeneratedKeys="true" keyProperty="board_idx">
		INSERT INTO
		board(board_empl_idx, board_type_idx, dept_idx, board_title, board_content, file_key)
		VALUES(#{appo_empl_idx}, #{board_type_idx}, #{dept_idx}, #{board_title}, #{board_content}, #{file_key})
	</insert>

	<insert id="saveFile" parameterType="map">
		INSERT INTO file(file_key,
		uploader_idx, ori_filename, new_filename, file_type, file_addr)
		VALUES(#{file_key}, #{uploader_idx}, #{ori_filename}, #{new_filename},
		#{file_type}, #{file_addr})
	</insert>
	
	<select id="getDepartmentList" parameterType="map" resultType="map">
		SELECT dept_idx, dept_name FROM department
	</select>

	<select id="boardList" resultType="map">
	    SELECT 
	        b.board_idx, 
	        b.board_empl_idx, 
	        b.board_type_idx, 
	        b.dept_idx, 
	        b.board_title, 
	        b.board_content, 
	        b.board_view_cnt,
	        DATE_FORMAT(b.board_write_date, '%Y-%m-%d %H:%i') AS board_write_date,
	        DATE_FORMAT(b.board_update_date, '%Y-%m-%d %H:%i') AS board_update_date,
	        e.empl_name, 
	        e.empl_id, 
	        d.dept_name, 
	        bt.board_type_name
	    FROM board b
	    JOIN employee e ON b.board_empl_idx = e.empl_idx
	    JOIN department d ON b.dept_idx = d.dept_idx
	    JOIN board_type bt ON b.board_type_idx = bt.board_type_idx
	    WHERE 1 = 1
	
	    <!-- 1. 부서와 유형을 아무것도 선택하지 않았을 때 -->
	    <if test="dept == '' and type == ''">
	        AND (b.board_type_idx = 3  <!-- 전체공지 -->
	        OR b.board_type_idx = 1  <!-- 문서 -->
	        OR b.board_type_idx = 2) <!-- 부서공지 (부서공지 제외!) -->
	    </if>
	
	    <!-- 2. 부서만 선택했을 때 -->
	    <if test="dept != '' and type == ''">
	        AND b.dept_idx = #{dept}  <!-- 부서에서만 가져옴 -->
	    </if>
	
	    <!-- 3. 유형만 선택했을 때 -->
	    <if test="dept == '' and type != ''">
	        AND bt.board_type_idx = #{type}
	    </if>
	
	    <!-- 4. 부서와 유형을 둘 다 선택했을 때 -->
	    <if test="dept != '' and type != ''">
	        AND b.dept_idx = #{dept}
	        AND bt.board_type_idx = #{type}
	    </if>
	
	    <!-- 검색어가 있을 때 -->
	    <if test="searchType != null and searchType != '' and keyword != null and keyword != ''">
	        AND ${searchType} LIKE CONCAT('%', #{keyword}, '%')
	    </if>
	
	    ORDER BY b.board_write_date DESC
	    LIMIT #{limit} OFFSET #{offset}
	</select>


	<select id="countBoardList" resultType="map">
	    SELECT 
	        CEIL(COUNT(*) / COALESCE(#{cnt}, 15)) AS pages  <!-- 페이지 수 계산 -->
	    FROM board b
	    JOIN employee e ON b.board_empl_idx = e.empl_idx
	    JOIN department d ON b.dept_idx = d.dept_idx
	    JOIN board_type bt ON b.board_type_idx = bt.board_type_idx
	    WHERE 1 = 1
	
	    <!-- 1. 부서와 유형을 아무것도 선택하지 않았을 때 -->
	    <if test="dept == '' and type == ''">
	        AND (b.board_type_idx = 3  <!-- 전체공지 -->
	        OR b.board_type_idx = 1  <!-- 문서 -->
	        OR b.board_type_idx = 2) <!-- 부서공지 제외! -->
	    </if>
	
	    <!-- 2. 부서만 선택했을 때 -->
	    <if test="dept != '' and type == ''">
	        AND b.dept_idx = #{dept}  <!-- 부서에서만 가져옴 -->
	    </if>
	
	    <!-- 3. 유형만 선택했을 때 -->
	    <if test="dept == '' and type != ''">
	        AND bt.board_type_idx = #{type}
	    </if>
	
	    <!-- 4. 부서와 유형을 둘 다 선택했을 때 -->
	    <if test="dept != '' and type != ''">
	        AND b.dept_idx = #{dept}
	        AND bt.board_type_idx = #{type}
	    </if>
	
	    <!-- 검색어가 있을 때 -->
	    <if test="searchType != null and searchType != '' and keyword != null and keyword != ''">
	        AND ${searchType} LIKE CONCAT('%', #{keyword}, '%')
	    </if>
	</select>

	
	<select id="commentCount" parameterType="int" resultType="int">
		SELECT
		(SELECT COUNT(*) FROM reply r WHERE r.board_idx = b.board_idx) +
		(SELECT COUNT(*) FROM reply_reply rr WHERE rr.reply_idx IN(SELECT
		r.reply_idx FROM reply r WHERE r.board_idx = b.board_idx)) AS
		total_count
		FROM board b
		WHERE b.board_idx = #{board_idx};
	</select>

	<select id="getUserDept" parameterType="String">
		SELECT a.dept_idx
		FROM
		employee e
		JOIN appointment a ON e.empl_idx = a.appo_empl_idx
		WHERE
		e.empl_id = #{id}
		ORDER BY appo_idx DESC
		LIMIT 1
	</select>

	<!-- 게시글 ID로 게시글을 조회하는 쿼리 -->
	<select id="getBoardByIdx" parameterType="int" resultType="map">
		SELECT b.board_idx, b.board_empl_idx, b.board_type_idx, b.dept_idx,
		b.board_title, b.board_content, b.board_view_cnt, 
		DATE_FORMAT(b.board_write_date, '%Y-%m-%d %H:%i') AS board_write_date,
		DATE_FORMAT(b.board_update_date, '%Y-%m-%d %H:%i') AS board_update_date,
		e.empl_name, e.empl_id, d.dept_name,
		bt.board_type_name
		FROM board b
		JOIN employee e ON b.board_empl_idx =
		e.empl_idx
		JOIN department d ON b.dept_idx = d.dept_idx
		JOIN board_type
		bt ON b.board_type_idx = bt.board_type_idx
		WHERE b.board_idx =
		#{board_idx}
	</select>

	<update id="incrementView" parameterType="int">
		UPDATE board
		SET
		board_view_cnt = board_view_cnt + 1
		WHERE board_idx = #{board_idx}
	</update>

	<select id="getReplyList" parameterType="int" resultType="map">
		SELECT
		r.reply_idx, r.board_idx, r.reply_empl_idx, r.reply_content,
		DATE_FORMAT(r.reply_write_date, '%Y-%m-%d %H:%i') AS reply_write_date,
		r.reply_update_date, e.empl_name, d.dept_name
		FROM reply r
		JOIN employee
		e ON r.reply_empl_idx = e.empl_idx
		JOIN board b ON
		r.board_idx =
		b.board_idx
		JOIN department d ON b.dept_idx = d.dept_idx
		WHERE
		r.board_idx = #{board_idx}
		ORDER BY reply_write_date ASC
	</select>

	<select id="getReReplyList" parameterType="int" resultType="map">
		SELECT rr.re_reply_idx, rr.reply_idx, rr.re_reply_empl_idx,
		rr.re_reply_content, DATE_FORMAT(rr.re_reply_write_date, '%Y-%m-%d
		%H:%i') AS re_reply_write_date, rr.re_reply_update_date, e.empl_name,
		d.dept_name
		FROM reply_reply rr
		JOIN employee e ON rr.re_reply_empl_idx
		= e.empl_idx
		JOIN reply r ON rr.reply_idx = r.reply_idx
		JOIN board b ON
		r.board_idx = b.board_idx
		JOIN department d ON b.dept_idx = d.dept_idx
		WHERE r.reply_idx = #{reply_idx}
		ORDER BY re_reply_write_date ASC
	</select>

	<insert id="writeReply" parameterType="map">
		INSERT INTO reply
		(board_idx, reply_empl_idx, reply_content)
		VALUES (#{board_idx},
		#{empl_idx}, #{reply})
	</insert>
	
	<update id="updateReply">
		UPDATE reply 
		SET reply_content = #{reply}
		WHERE reply_idx = #{reply_idx}
	</update>

	<insert id="writeReReply" parameterType="map">
		INSERT INTO reply_reply
		(reply_idx, re_reply_empl_idx, re_reply_content)
		VALUES (#{reply_idx},
		#{re_reply_empl_idx}, #{re_reply})
	</insert>
	
	<update id="updateReReply">
		UPDATE reply_reply 
		SET re_reply_content = #{re_reply}
		WHERE re_reply_idx = #{re_reply_idx}
	</update>
	
	<update id="updateBoard" parameterType="map">
		UPDATE board
		<set>
        	<if test="params.dept != null">dept_idx = #{params.dept},</if>
			<if test="params.board_type_idx != null">board_type_idx = #{params.board_type_idx},</if>
			<if test="params.board_title != null">board_title = #{params.board_title},</if>
			<if test="params.board_content != null">board_content = #{params.board_content},</if>
		</set>
    	WHERE board_idx = #{board_idx} AND board_empl_idx = #{empl_idx}
	</update>
	
</mapper>