<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.toast.management.dao.DepartmentDAO">

<insert id="organizationAdd" parameterType="Map">
	 insert into department (dept_name, dept_duty, dept_addr, dept_high) values (
        #{dept_name},
        #{dept_duty},
        #{dept_addr},
        <choose>
            <when test="dept_high !=1">
                #{dept_high}
            </when>
            <otherwise>
                NULL
            </otherwise>
        </choose>
    );
</insert>
<!--  
<insert id="organizationDudyAdd">
	insert into duty (duty_name) values (#{param1})
</insert>
-->
<select id="getduty" resultType="com.toast.management.dto.DutyDTO">
	select * from duty
</select>

<select id="getdept" resultType="com.toast.management.dto.DepartmentDTO">
	select * from department
</select>

<select id="getposi" resultType="com.toast.management.dto.PositionDTO">
	select * from position_
</select>

<select id="getdeptinfo" resultType="com.toast.management.dto.DepartmentDTO">
	select * from department where dept_idx = #{param1}
</select>

<update id="organizationUpdate" parameterType="Map">
	update department set dept_name = #{dept_name}, dept_duty = #{dept_duty}, dept_high = #{dept_high}, dept_addr = #{dept_addr} where dept_idx = #{dept_idx}
</update>

<select id="getdeptTree" resultType="com.toast.management.dto.DeptInfoTreeDTO" >
SELECT 
    d1.dept_idx AS dept_idx,              
    d1.dept_name AS dept_name,           
    e1.empl_name AS dept_head_name,       
    du1.duty_name AS dept_duty,          
    d2.dept_name AS high_dept_name,      
    e2.empl_name AS high_dept_head_name, 
    du2.duty_name AS high_dept_head_duty  
FROM 
    department d1
LEFT JOIN 
    employee e1 ON d1.dept_head_idx = e1.empl_idx  
LEFT JOIN 
    duty du1 ON d1.dept_idx = du1.duty_idx         
LEFT JOIN 
    department d2 ON d1.dept_high = d2.dept_idx   
LEFT JOIN 
    employee e2 ON d2.dept_head_idx = e2.empl_idx 
LEFT JOIN 
    duty du2 ON d2.dept_idx = du2.duty_idx
    where
    d1.dept_idx >= 2 
</select>

<select id="getDeptMemberCounts" resultType="java.util.HashMap">
SELECT 
    a.dept_idx, 
    COUNT(a.appo_empl_idx) AS member_count
FROM 
    appointment a
WHERE 
    a.transfer_date IS NULL  
GROUP BY 
    a.dept_idx
</select>

<select id="getdeptheadhistory" resultType="com.toast.management.dto.DeptHistoryDTO">
SELECT 
    dept_history_idx, 
    dept_idx, 
    dept_name, 
    dept_head_idx, 
    dept_duty, 
    dept_addr, 
    dept_change_date, 
    dept_high, 
    dept_state
FROM (
    SELECT 
        dept_history_idx, 
        dept_idx, 
        dept_name, 
        dept_head_idx, 
        dept_duty, 
        dept_addr, 
        dept_change_date, 
        dept_high, 
        dept_state,
        LAG(dept_head_idx) OVER (PARTITION BY dept_idx ORDER BY dept_change_date) AS prev_dept_head_idx
    FROM department_history
    WHERE dept_idx = #{param1}
     AND dept_head_idx IS NOT NULL
) AS subquery
WHERE dept_head_idx != prev_dept_head_idx OR prev_dept_head_idx IS NULL
ORDER BY dept_change_date;
</select>

<select id="getfirstdate" resultType="com.toast.management.dto.DeptHistoryDTO">
SELECT * 
FROM department_history dh 
WHERE dept_idx = #{param1}
ORDER BY dept_history_idx
LIMIT 1; 
</select>

<select id="getdeptmeberlist" resultType="com.toast.management.dto.DeptDetailMemberDTO">
SELECT 
e.empl_name,
d.duty_name,
e.empl_job,
p.position_name,
e.empl_cmp_email,
a.movein_date,
s.statement_name
from employee e
join appointment a on e.appolast_idx = a.appo_idx
join `statement` s on e.statement_idx = s.statement_idx
join duty d on a.duty_idx = d.duty_idx
join position_ p on a.position_idx = p.position_idx
where a.dept_idx = #{param1} and e.statement_idx = 1
</select>

<select id="searchDeptMember" resultType="com.toast.management.dto.DeptDetailMemberDTO">
SELECT 
        e.empl_name,
        d.duty_name,
        e.empl_job,
        p.position_name,
        e.empl_cmp_email,
        a.movein_date,
        s.statement_name
    FROM employee e
    JOIN appointment a ON e.appolast_idx = a.appo_idx
    JOIN `statement` s ON e.statement_idx = s.statement_idx
    JOIN duty d ON a.duty_idx = d.duty_idx
    JOIN position_ p ON a.position_idx = p.position_idx
    WHERE a.dept_idx = #{param3}  <!-- dept_idx는 param3으로 전달됨 -->
      AND e.statement_idx = 1
      AND (
          (#{param1} IS NULL OR e.empl_name LIKE CONCAT('%', #{param1}, '%')) 
          OR (#{param2} IS NULL OR e.empl_cmp_email LIKE CONCAT('%', #{param2}, '%'))
      );
</select>


</mapper>