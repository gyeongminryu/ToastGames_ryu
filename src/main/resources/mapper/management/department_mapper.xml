<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.toast.management.dao.DepartmentDAO">

<insert id="organizationAdd" parameterType="Map">
	 insert into department (dept_name, dept_duty, dept_addr,dept_depth ,dept_high) values (
        #{dept_name},
        #{dept_duty},
        #{dept_addr},
        #{dept_depth},
        <choose>
            <when test="dept_high !=1">
                #{dept_high}
            </when>
            <otherwise>
                NULL
            </otherwise>
        </choose>
    );
</insert>
<!--  
<insert id="organizationDudyAdd">
	insert into duty (duty_name) values (#{param1})
</insert>
-->
<select id="getduty" resultType="com.toast.management.dto.DutyDTO">
	select * from duty
</select>

<select id="getdept" resultType="com.toast.management.dto.DepartmentDTO">
	select * from department
</select>

<select id="getposi" resultType="com.toast.management.dto.PositionDTO">
	select * from position_
</select>

<select id="getdeptinfo" resultType="com.toast.management.dto.DepartmentDTO">
	select * from department where dept_idx = #{param1}
</select>

<update id="organizationUpdate" parameterType="Map">
	update department set dept_name = #{dept_name}, dept_duty = #{dept_duty}, dept_high = #{dept_high}, dept_addr = #{dept_addr} where dept_idx = #{dept_idx}
</update>

<select id="getdeptTree" resultType="com.toast.management.dto.DeptInfoTreeDTO" >
SELECT 
    d1.dept_idx AS dept_idx,              
    d1.dept_name AS dept_name,
    d1.dept_high as dept_high,           
    e1.empl_name AS dept_head_name,       
    du1.duty_name AS dept_duty,          
    d2.dept_name AS high_dept_name,      
    e2.empl_name AS high_dept_head_name, 
    du2.duty_name AS high_dept_head_duty  
FROM 
    department d1
LEFT JOIN 
    employee e1 ON d1.dept_head_idx = e1.empl_idx  
LEFT JOIN 
    duty du1 ON d1.dept_idx = du1.duty_idx         
LEFT JOIN 
    department d2 ON d1.dept_high = d2.dept_idx   
LEFT JOIN 
    employee e2 ON d2.dept_head_idx = e2.empl_idx 
LEFT JOIN 
    duty du2 ON d2.dept_idx = du2.duty_idx
    where
    d1.dept_idx >= 2 
</select>

<select id="getDeptMemberCounts" resultType="java.util.HashMap">
SELECT 
    a.dept_idx, 
    COUNT(a.appo_empl_idx) AS member_count
FROM 
    appointment a
WHERE 
    a.transfer_date IS NULL  
GROUP BY 
    a.dept_idx
</select>

<select id="getdeptheadhistory" resultType="com.toast.management.dto.DeptHistoryDTO">
SELECT 
    dept_history_idx, 
    dept_idx, 
    dept_name, 
    dept_head_idx, 
    dept_duty, 
    dept_addr, 
    dept_change_date, 
    dept_high, 
    dept_state
FROM (
    SELECT 
        dept_history_idx, 
        dept_idx, 
        dept_name, 
        dept_head_idx, 
        dept_duty, 
        dept_addr, 
        dept_change_date, 
        dept_high, 
        dept_state,
        LAG(dept_head_idx) OVER (PARTITION BY dept_idx ORDER BY dept_change_date) AS prev_dept_head_idx
    FROM department_history
    WHERE dept_idx = #{param1}
     AND dept_head_idx IS NOT NULL
) AS subquery
WHERE dept_head_idx != prev_dept_head_idx OR prev_dept_head_idx IS NULL
ORDER BY dept_change_date;
</select>

<select id="getfirstdate" resultType="com.toast.management.dto.DeptHistoryDTO">
SELECT * 
FROM department_history dh 
WHERE dept_idx = #{param1}
ORDER BY dept_history_idx
LIMIT 1; 
</select>

<select id="getdeptmeberlist" resultType="com.toast.management.dto.DeptDetailMemberDTO">
SELECT 
e.empl_name,
d.duty_name,
e.empl_job,
p.position_name,
e.empl_cmp_email,
a.movein_date,
s.statement_name
from employee e
join appointment a on e.appolast_idx = a.appo_idx
join `statement` s on e.statement_idx = s.statement_idx
join duty d on a.duty_idx = d.duty_idx
join position_ p on a.position_idx = p.position_idx
where a.dept_idx = #{param1} and e.statement_idx = 1
</select>

<select id="searchDeptMember" resultType="com.toast.management.dto.DeptDetailMemberDTO">
SELECT 
        e.empl_name,
        d.duty_name,
        e.empl_job,
        p.position_name,
        e.empl_cmp_email,
        a.movein_date,
        s.statement_name
    FROM employee e
    JOIN appointment a ON e.appolast_idx = a.appo_idx
    JOIN `statement` s ON e.statement_idx = s.statement_idx
    JOIN duty d ON a.duty_idx = d.duty_idx
    JOIN position_ p ON a.position_idx = p.position_idx
    WHERE a.dept_idx = #{param1}  
      <if test="param2 != null and param3 != null and param2 != '' and param3 != ''">
    AND (
        (#{param2} = 'empl_name' AND e.empl_name LIKE CONCAT('%', #{param3}, '%'))
        OR (#{param2} = 'empl_cmp_email' AND e.empl_cmp_email LIKE CONCAT('%', #{param3}, '%'))
        
    )
</if>
      
</select>

<select id="deptmemsearchname" resultType="com.toast.management.dto.DeptDetailMemberDTO">
 	SELECT 
        e.empl_name,
        d.duty_name,
        e.empl_job,
        p.position_name,
        e.empl_cmp_email,
        a.movein_date,
        s.statement_name
    FROM employee e
    JOIN appointment a ON e.appolast_idx = a.appo_idx
    JOIN `statement` s ON e.statement_idx = s.statement_idx
    JOIN duty d ON a.duty_idx = d.duty_idx
    JOIN position_ p ON a.position_idx = p.position_idx
    WHERE a.dept_idx = #{param2}  <!-- dept_idx는 param3으로 전달됨 -->
      AND e.statement_idx = 1
      AND (
          (#{param1} IS NULL OR e.empl_name LIKE CONCAT('%', #{param1}, '%')) 
      );
 </select>
 
 
 <select id="deptmemsearchemail" resultType="com.toast.management.dto.DeptDetailMemberDTO">
 	SELECT 
        e.empl_name,
        d.duty_name,
        e.empl_job,
        p.position_name,
        e.empl_cmp_email,
        a.movein_date,
        s.statement_name
    FROM employee e
    JOIN appointment a ON e.appolast_idx = a.appo_idx
    JOIN `statement` s ON e.statement_idx = s.statement_idx
    JOIN duty d ON a.duty_idx = d.duty_idx
    JOIN position_ p ON a.position_idx = p.position_idx
    WHERE a.dept_idx = #{param2}  <!-- dept_idx는 param3으로 전달됨 -->
      AND e.statement_idx = 1
      AND (
          (#{param1} IS NULL OR e.empl_cmp_email LIKE CONCAT('%', #{param1}, '%'))
      );
 </select>

<select id="getcompinfo">
	select * from company_info
</select>

<select id="getemplinfo" resultType="com.toast.management.dto.DeptDetailMemberDTO">
	select 
		e.empl_name,
		d.duty_name,
		p.position_name
		from employee e
		join appointment a on e.appolast_idx = a.appo_idx
		join duty d on d.duty_idx = a.duty_idx
		join position_ p on p.position_idx = a.position_idx
		where empl_idx = #{param1}

</select>

<insert id="companyinfoUpdateDo" parameterType="map">
	 INSERT INTO company_info (
        ceo_idx,
        comp_name,
        file_key,
        comp_est_date,
        comp_biz_no,
        comp_corp_no,
        comp_addr,
        comp_phone
       
    )
    VALUES (
        #{ceo_idx},
        #{comp_name},
        #{file_key},
        #{comp_est_date},
        #{comp_biz_no},
        #{comp_corp_no},
        #{comp_addr},
        #{comp_phone}
        
    )
    ON DUPLICATE KEY UPDATE
        ceo_idx = #{ceo_idx},
        comp_name = #{comp_name},
        file_key = file_key,
        comp_est_date = #{comp_est_date},
        comp_biz_no = #{comp_biz_no},
        comp_corp_no = #{comp_corp_no},
        comp_addr = #{comp_addr},
        comp_phone = #{comp_phone}
       
</insert>

<update id="compStampUpload">
	update company_info	set comp_stamp = #{param1} where id = 1;
</update>

<select id="getcompfile" parameterType="com.toast.member.dto.FileDTO">
	select * from file where file_key = #{param1}
</select>

<insert id="compFileUpload" parameterType="com.toast.member.dto.FileDTO">
	INSERT INTO file(file_key, uploader_idx, ori_filename, new_filename, file_type, file_addr, file_size)
			VALUES(#{file_key}, #{uploader_idx}, #{ori_filename}, #{new_filename}, #{file_type}, #{file_addr}, #{file_size})
</insert>

<update id="compStampDel">
	update company_info	set comp_stamp = null where id = 1
</update>

<select id="gethighdeptlist" resultType="com.toast.management.dto.DepartmentDTO">
	select * from department where dept_depth = 2 and dept_high is not null
</select>

<select id="getlowdeptlist" resultType="com.toast.management.dto.DepartmentDTO">
	select * from department where dept_depth = 3 and dept_high is not null
</select>


<select id="getDeptMembers" resultType="com.toast.management.dto.EmployeeDetailDTO">
	select 
	 e.empl_idx,
	 e.empl_name,
	 e.empl_id,
	 e.empl_pw,
	 e.empl_gender,
	 e.empl_birth,
	  e.empl_ssn1,
	  e.empl_ssn2,
	  e.bank_idx,
	  e.empl_account,
	  e.empl_cmp_email,
	  e.empl_cmp_phone,
	  e.empl_per_email,
	  e.empl_per_phone,
	  e.empl_addr,
	  e.statement_idx,
	  e.empl_join_date,
	  e.empl_resig_date,
	  e.empl_job,
	  e.empl_stamp,
	  e.empl_profile,
	  e.empl_changepw,
	  e.file_key,
	  e.appolast_idx,
	  d.dept_idx,
	  d.dept_name,
	 du.duty_idx,
	  du.duty_name,
	  p.position_idx,
	  p.position_name
from employee e
LEFT join appointment a on a.appo_idx = e.appolast_idx
LEFT join department d on d.dept_idx = a.dept_idx
LEFT join duty du on du.duty_idx = a.duty_idx
LEFT join position_ p on p.position_idx = a.position_idx
	where d.dept_idx = #{param1} and e.statement_idx = 1 and a.transfer_date is null
</select>


<select id="getDeptTeamMembers" resultType="com.toast.management.dto.EmployeeDetailDTO">
	SELECT 
    e.empl_idx,
    e.empl_name,
    e.empl_id,
    e.empl_pw,
    e.empl_gender,
    e.empl_birth,
    e.empl_ssn1,
    e.empl_ssn2,
    e.bank_idx,
    e.empl_account,
    e.empl_cmp_email,
    e.empl_cmp_phone,
    e.empl_per_email,
    e.empl_per_phone,
    e.empl_addr,
    e.statement_idx,
    e.empl_join_date,
    e.empl_resig_date,
    e.empl_job,
    e.empl_stamp,
    e.empl_profile,
    e.empl_changepw,
    e.file_key,
    e.appolast_idx,
    d.dept_idx,
    d.dept_name,
    du.duty_idx,
    du.duty_name,
    p.position_idx,
    p.position_name
FROM 
    employee e
LEFT JOIN 
    appointment a ON a.appo_idx = e.appolast_idx
LEFT JOIN 
    department d ON d.dept_idx = a.dept_idx
LEFT JOIN 
    duty du ON du.duty_idx = a.duty_idx
LEFT JOIN 
    position_ p ON p.position_idx = a.position_idx
WHERE 
    d.dept_idx = #{param1}  
    AND e.statement_idx = 1  
    AND a.transfer_date IS NULL 
    AND NOT EXISTS (
        SELECT 1
        FROM (
            SELECT 
                tm.teammem_empl_idx,
                MAX(tm.movein_date) AS latest_movein_date
            FROM 
                team_members tm
            WHERE 
                tm.team_idx = #{param2} 
            GROUP BY 
                tm.teammem_empl_idx
        ) latest_team
        WHERE 
            latest_team.teammem_empl_idx = e.empl_idx
            AND (
                SELECT tm.transfer_date 
                FROM team_members tm
                WHERE tm.teammem_empl_idx = e.empl_idx 
                      AND tm.movein_date = latest_team.latest_movein_date
            ) IS NULL
    )
</select>

<select id="getDeptSearchMembers" resultType="com.toast.management.dto.EmployeeDetailDTO">
SELECT 
    e.empl_idx,
    e.empl_name,
    e.empl_id,
    e.empl_pw,
    e.empl_gender,
    e.empl_birth,
    e.empl_ssn1,
    e.empl_ssn2,
    e.bank_idx,
    e.empl_account,
    e.empl_cmp_email,
    e.empl_cmp_phone,
    e.empl_per_email,
    e.empl_per_phone,
    e.empl_addr,
    e.statement_idx,
    e.empl_join_date,
    e.empl_resig_date,
    e.empl_job,
    e.empl_stamp,
    e.empl_profile,
    e.empl_changepw,
    e.file_key,
    e.appolast_idx,
    d.dept_idx,
    d.dept_name,
    du.duty_idx,
    du.duty_name,
    p.position_idx,
    p.position_name
FROM 
    employee e
LEFT JOIN 
    appointment a ON a.appo_idx = e.appolast_idx
LEFT JOIN 
    department d ON d.dept_idx = a.dept_idx
LEFT JOIN 
    duty du ON du.duty_idx = a.duty_idx
LEFT JOIN 
    position_ p ON p.position_idx = a.position_idx
WHERE 
    d.dept_idx = #{param1}  -- 특정 부서의 직원만
    AND e.statement_idx = 1  -- 현재 근무 중인 직원만
    AND a.transfer_date IS NULL -- 전출되지 않은 경우
    AND NOT EXISTS (
        SELECT 1
        FROM (
            SELECT 
                tm.teammem_empl_idx,
                MAX(tm.movein_date) AS latest_movein_date
            FROM 
                team_members tm
            WHERE 
                tm.team_idx = #{param4} -- 특정 프로젝트 팀 ID 필터
            GROUP BY 
                tm.teammem_empl_idx
        ) latest_team
        WHERE 
            latest_team.teammem_empl_idx = e.empl_idx  -- 직원이 팀 멤버에 포함된 경우
            AND (
                SELECT tm.transfer_date 
                FROM team_members tm
                WHERE 
                    tm.teammem_empl_idx = e.empl_idx 
                    AND tm.movein_date = latest_team.latest_movein_date
            ) IS NULL -- 전출되지 않은 경우만 필터링
    )
<if test="param2 != null and param3 != null and param2 != '' and param3 != ''">
    AND (
        (#{param2} = 'empl_name' AND e.empl_name LIKE CONCAT('%', #{param3}, '%'))
        OR (#{param2} = 'empl_id' AND e.empl_id LIKE CONCAT('%', #{param3}, '%'))
        OR (#{param2} = 'dept_name' AND d.dept_name LIKE CONCAT('%', #{param3}, '%'))
    )
</if>

</select>







</mapper>